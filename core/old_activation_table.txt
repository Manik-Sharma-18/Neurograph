# core/activation_table.py



class ActivationTable:
    def __init__(self, vector_dim, decay_factor=0.95, min_strength=0.001, device='cpu'):
        self.vector_dim = vector_dim
        self.decay = decay_factor
        self.min_strength = min_strength
        self.device = device
        self.table = {}  # node_id → (phase_idx [D], mag_idx [D], strength)

    def inject(self, node_id, phase_idx, mag_idx, strength):
        """
        Inject or update node activation.
        If node already exists, it will combine the new magnitude and strength.
        Phase is overwritten (context-sensitive).
        """
        if node_id in self.table:
            prev_phase, prev_mag, prev_strength = self.table[node_id]
            new_mag = prev_mag + mag_idx
            new_strength = prev_strength + strength
            self.table[node_id] = (phase_idx, new_mag, new_strength)
        else:
            self.table[node_id] = (phase_idx, mag_idx, strength)

    def decay_and_prune(self):
        """
        Apply decay to strengths, and remove weak activations.
        """
        new_table = {}
        for node_id, (phase, mag, strength) in self.table.items():
            decayed = strength * self.decay
            if decayed >= self.min_strength:
                new_table[node_id] = (phase, mag, decayed)
        self.table = new_table

    def get_active_context(self):
        """
        Returns: dict of node_id → (phase_idx [D], mag_idx [D])
        """
        return {
            nid: (phase, mag)
            for nid, (phase, mag, strength) in self.table.items()
        }

    def is_active(self, node_id):
        return node_id in self.table

    def clear(self):
        self.table.clear()
'''
Design Notes

    Phase is not accumulated — overwritten per source

    Magnitude and strength are accumulated across inputs

    Prunes weak signals via decay_and_prune()

    Returns compact dictionary of current actives for the next timestep
'''

'''
FOR NEW ACT table

When you initialize ActivationTable in forward_engine.py or elsewhere, update your call to include:

activation = ActivationTable(
    vector_dim=cfg["vector_dim"],
    phase_bins=cfg["phase_bins"],
    mag_bins=cfg["mag_bins"],
    decay_factor=cfg["decay_factor"],
    min_strength=cfg["min_activation_strength"],
    device="cpu"
)
'''